// Generated by CoffeeScript 1.6.2
(function() {
  var Depot;

  Depot = (function() {
    function Depot(options) {
      this.checkDependencies();
      this.store = window.localStorage;
      this.keyPrefix = options != null ? options.prefix : void 0;
    }

    Depot.prototype.checkDependencies = function() {
      if (!window.localStorage) {
        throw "[Depot]: Browser requires window.localStorage support";
      }
      if (!((typeof JSON !== "undefined" && JSON !== null ? JSON.stringify : void 0) && (typeof JSON !== "undefined" && JSON !== null ? JSON.parse : void 0))) {
        throw "[Depot]: JSON library required";
      }
    };

    Depot.prototype.get = function(key) {
      return this._decode(this.store.getItem(this._buildKey(key)));
    };

    Depot.prototype.set = function(key, data) {
      return this.store.setItem(this._buildKey(key), this._encode(data));
    };

    Depot.prototype.del = function(key) {
      return this.store.removeItem(this._buildKey(key));
    };

    Depot.prototype.push = function(key, data) {
      var value;

      value = this.get(key) || [];
      value.push(data);
      return this.set(key, value);
    };

    Depot.prototype.pop = function(key) {
      var poppedData, value;

      value = this.get(key) || [];
      poppedData = value.pop();
      this.set(key, value);
      return poppedData;
    };

    Depot.prototype.len = function(key) {
      var value;

      value = this.get(key) || [];
      return value.length;
    };

    Depot.prototype.incr = function(key, incrBy) {
      if (incrBy == null) {
        incrBy = 1;
      }
      return this._modifyCounter(key, function(val) {
        return val + incrBy;
      });
    };

    Depot.prototype.decr = function(key, decrBy) {
      if (decrBy == null) {
        decrBy = 1;
      }
      return this._modifyCounter(key, function(val) {
        return val - decrBy;
      });
    };

    Depot.prototype._modifyCounter = function(key, changeFunction) {
      var currentValue, newValue;

      currentValue = this.get(key) || 0;
      if (typeof currentValue === "number") {
        newValue = changeFunction(currentValue);
        this.set(key, newValue);
        return newValue;
      } else {
        throw "Cannot perform counter operation on non-number";
      }
    };

    Depot.prototype._encode = function(data) {
      return JSON.stringify(data);
    };

    Depot.prototype._decode = function(data) {
      return JSON.parse(data);
    };

    Depot.prototype._buildKey = function(key) {
      if (this._isArray(key)) {
        if (this.keyPrefix) {
          key.unshift(this.keyPrefix);
        }
        return key.join(":");
      } else {
        if (this.keyPrefix) {
          return "" + this.keyPrefix + ":" + key;
        }
        return key;
      }
    };

    Depot.prototype._isArray = Array.isArray || function(obj) {
      return toString.call(obj) === '[object Array]';
    };

    Depot.prototype.remainingSpace = function() {
      return 1024 * 1024 * 5 - unescape(encodeURIComponent(JSON.stringify(this.store))).length;
    };

    return Depot;

  })();

  this.Depot = Depot;

}).call(this);
