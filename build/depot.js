// Generated by CoffeeScript 1.6.2
(function() {
  var Depot;

  Depot = (function() {
    function Depot(options) {
      this.checkDependencies();
      this.vent = {};
      this.store = window.localStorage;
      this.keyPrefix = options != null ? options.prefix : void 0;
    }

    Depot.prototype.checkDependencies = function() {
      if (!window.localStorage) {
        throw "[Depot]: Browser requires window.localStorage support";
      }
      if (!((typeof JSON !== "undefined" && JSON !== null ? JSON.stringify : void 0) && (typeof JSON !== "undefined" && JSON !== null ? JSON.parse : void 0))) {
        throw "[Depot]: JSON library required";
      }
    };

    Depot.prototype.get = function(key) {
      return this._decode(this.store.getItem(this._buildKey(key)));
    };

    return Depot;

  })();

  ({
    set: function(key, data, options) {
      var fullKey;

      if (options == null) {
        options = {};
      }
      fullKey = this._buildKey(key);
      this.store.setItem(fullKey, this._encode(data));
      if (!options.suppressEvent) {
        this._fireEvent('keyChanged', {
          key: fullKey,
          operation: 'set',
          value: data
        });
      }
      return {
        del: function(key) {
          fullKey = this._buildKey(key);
          this.store.removeItem(fullKey);
          return this._fireEvent('keyDeleted', {
            key: fullKey
          });
        },
        push: function(key, data) {
          var value;

          value = this.get(key) || [];
          value.push(data);
          return this.set(key, value);
        },
        pop: function(key) {
          var poppedData, value;

          value = this.get(key) || [];
          poppedData = value.pop();
          this.set(key, value);
          return poppedData;
        },
        len: function(key) {
          var value;

          value = this.get(key) || [];
          return value.length;
        },
        incr: function(key, incrBy) {
          var newValue;

          if (incrBy == null) {
            incrBy = 1;
          }
          newValue = this._modifyCounter(key, function(val) {
            return val + incrBy;
          });
          this._fireEvent('keyChanged', {
            key: this._buildKey(key),
            operation: 'incr',
            value: newValue
          });
          return newValue;
        },
        decr: function(key, decrBy) {
          var newValue;

          if (decrBy == null) {
            decrBy = 1;
          }
          newValue = this._modifyCounter(key, function(val) {
            return val - decrBy;
          });
          this._fireEvent('keyChanged', {
            key: this._buildKey(key),
            operation: 'decr',
            value: newValue
          });
          return newValue;
        },
        _modifyCounter: function(key, changeFunction) {
          var currentValue, newValue;

          currentValue = this.get(key) || 0;
          if (typeof currentValue === "number") {
            newValue = changeFunction(currentValue);
            this.set(key, newValue, {
              suppressEvent: true
            });
            return newValue;
          } else {
            throw "Cannot perform counter operation on non-number";
          }
        },
        _encode: function(data) {
          return JSON.stringify(data);
        },
        _decode: function(data) {
          return JSON.parse(data);
        },
        _buildKey: function(key) {
          if (this._isArray(key)) {
            if (this.keyPrefix) {
              key.unshift(this.keyPrefix);
            }
            return key.join(":");
          } else {
            if (this.keyPrefix) {
              return "" + this.keyPrefix + ":" + key;
            }
            return key;
          }
        },
        _fireEvent: function(eventName, detail) {
          var e;

          detail.eventType = eventName;
          e = new CustomEvent('depot:keyEvent', {
            detail: detail
          });
          return window.dispatchEvent(e);
        },
        _isArray: Array.isArray || function(obj) {
          return toString.call(obj) === '[object Array]';
        },
        remainingSpace: function() {
          return 1024 * 1024 * 5 - unescape(encodeURIComponent(JSON.stringify(this.store))).length;
        }
      };
    }
  });

  this.Depot = Depot;

}).call(this);
